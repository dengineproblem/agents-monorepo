services:
  agent-brain:
    build: ./services/agent-brain
    env_file:
      - ./.env.brain
    environment:
      - BRAIN_DRY_RUN=false
      - BRAIN_MAX_ACTIONS_PER_RUN=100
      - BRAIN_DEBUG_LLM=true
      - BRAIN_MODEL=gpt-5
      - BRAIN_TEST_MODE=false
      - AGENT_SERVICE_URL=http://agent-service:8082
      - CRON_ENABLED=true
      - CRON_SCHEDULE=0 8 * * *
      - LOG_ALERT_TELEGRAM_BOT_TOKEN=7892027011:AAESp4liXox67dJptKeMxNZRaBx7ecK3QJg
      - LOG_ALERT_TELEGRAM_CHAT_ID=313145981
      - LOKI_URL=http://loki:3100
      - LOG_ALERT_LOKI_ENVIRONMENT=development
    ports:
      - "7080:7080"
    restart: unless-stopped

  creative-analyzer:
    build: ./services/agent-brain
    env_file:
      - ./.env.brain
    environment:
      - ANALYZER_PORT=7081
    command: node src/analyzerService.js
    ports:
      - "7081:7081"
    restart: unless-stopped

  agent-service:
    build: ./services/agent-service
    env_file:
      - ./.env.agent
    environment:
      - AGENT_DRY_RUN=false
      - FB_VALIDATE_ONLY=false
      - CAMPAIGN_BUILDER_MODEL=gpt-4o
      - ANALYZER_URL=http://creative-analyzer:7081
    ports:
      - "8082:8082"
    restart: unless-stopped

  # Production frontend (app.performanteaiagency.com)
  frontend:
    build:
      context: ./services/frontend
      args:
        BUILD_MODE: production
    environment:
      - NODE_ENV=production
    ports:
      - "3001:80"
    restart: unless-stopped
    depends_on:
      - agent-service

  # App Review frontend (performanteaiagency.com)
  frontend-appreview:
    build:
      context: ./services/frontend
      args:
        BUILD_MODE: appreview
    environment:
      - NODE_ENV=production
    ports:
      - "3002:80"
    restart: unless-stopped
    depends_on:
      - agent-service

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - frontend-appreview
      - agent-service
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.1
    command: ["-config.file=/etc/loki/local-config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./logging/loki-config.yml:/etc/loki/local-config.yml:ro
      - loki-data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.1
    command: ["-config.file=/etc/promtail/promtail-config.yml"]
    environment:
      - PROMTAIL_ENVIRONMENT=development
    volumes:
      - ./logging/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_DATAPROXY_LOGGING=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./logging/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - loki
    restart: unless-stopped

  # Evolution API - WhatsApp integration
  # ВАЖНО: Образ собран локально из исходников GitHub (v2.3.6)
  # Обновление: cd ~/evolution-api && git checkout NEW_VERSION && docker build -t atendai/evolution-api:NEW_VERSION .
  evolution-api:
    image: atendai/evolution-api:2.3.6
    container_name: evolution-api
    ports:
      - "8080:8080"
    dns:
      - 8.8.8.8
      - 1.1.1.1
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1  # Отключен для стабильности WhatsApp подключения
    environment:
      - SERVER_URL=https://evolution.performanteaiagency.com
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://evolution:${EVOLUTION_DB_PASSWORD}@evolution-postgres:5432/evolution
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://evolution-redis:6379/0
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_URL=http://agent-service:8082/api/webhooks/evolution
      - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
      - WEBHOOK_EVENTS_CONNECTION_UPDATE=true
      - WEBHOOK_EVENTS_QRCODE_UPDATED=true
      - CONFIG_SESSION_PHONE_CLIENT=Evolution API
      - QRCODE_LIMIT=30
      - LOG_LEVEL=DEBUG
      - LOG_COLOR=false
      - LOG_BAILEYS=debug
      - WEBSOCKET_ENABLED=true
    depends_on:
      - evolution-redis
      - evolution-postgres
      - agent-service
    restart: unless-stopped

  evolution-redis:
    image: redis:7-alpine
    container_name: evolution-redis
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - evolution-redis-data:/data
    restart: unless-stopped

  evolution-postgres:
    image: postgres:15-alpine
    container_name: evolution-postgres
    environment:
      - POSTGRES_USER=evolution
      - POSTGRES_PASSWORD=${EVOLUTION_DB_PASSWORD}
      - POSTGRES_DB=evolution
    ports:
      - "5433:5432"
    volumes:
      - evolution-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  loki-data:
  grafana-data:
  evolution-redis-data:
  evolution-postgres-data:
