/**
 * Campaign Builder Agent - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
 * 
 * –≠—Ç–æ—Ç LLM-–∞–≥–µ–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç agent-brain:
 * - agent-brain: —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±—é–¥–∂–µ—Ç—ã
 * - campaign-builder: —Å–æ–∑–¥–∞–µ—Ç –ù–û–í–´–ï –∫–∞–º–ø–∞–Ω–∏–∏, –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã
 */

import { supabase } from './supabase.js';
import { createLogger } from './logger.js';
import { resolveFacebookError } from './facebookErrors.js';

const FB_API_VERSION = process.env.FB_API_VERSION || 'v20.0';
const log = createLogger({ module: 'campaignBuilder' });

// ========================================
// TYPES
// ========================================

export type CampaignObjective = 'whatsapp' | 'instagram_traffic' | 'site_leads';

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è lowercase objective –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è LLM
export function objectiveToLLMFormat(objective: CampaignObjective): 'WhatsApp' | 'Instagram' | 'SiteLeads' {
  const mapping = {
    whatsapp: 'WhatsApp' as const,
    instagram_traffic: 'Instagram' as const,
    site_leads: 'SiteLeads' as const,
  };
  return mapping[objective];
}

export type AvailableCreative = {
  user_creative_id: string;
  title: string;
  fb_creative_id_whatsapp: string | null;
  fb_creative_id_instagram_traffic: string | null;
  fb_creative_id_site_leads: string | null;
  created_at: string;
  // Scoring data (–µ—Å–ª–∏ –µ—Å—Ç—å)
  risk_score?: number;
  risk_level?: 'Low' | 'Medium' | 'High';
  creative_score?: number;
  recommendations?: string[];
  // Performance data
  performance?: {
    avg_ctr?: number;
    avg_cpm?: number;
    avg_cpl?: number;
    total_impressions?: number;
    total_spend?: number;
  };
};

export type BudgetConstraints = {
  plan_daily_budget_cents: number;
  available_budget_cents: number;
  default_cpl_target_cents: number;
  min_budget_per_campaign_cents: number;
  max_budget_per_campaign_cents: number;
};

export type CampaignBuilderInput = {
  user_account_id: string;
  objective: CampaignObjective;
  direction_id?: string; // UUID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
  campaign_name?: string;
  requested_budget_cents?: number;
  additional_context?: string;
};

export type CampaignPlan = {
  campaign_name: string;
  objective: CampaignObjective;
  daily_budget_cents: number;
  selected_creatives: {
    user_creative_id: string;
    title: string;
    reason: string;
  }[];
  reasoning: string;
  estimated_cpl: number;
  confidence: 'high' | 'medium' | 'low';
};

export type CampaignAction = {
  type: 'CreateCampaignWithCreative' | 'CreateMultipleAdSets';
  params: {
    user_creative_ids?: string[]; // –î–ª—è single adset
    objective?: 'WhatsApp' | 'Instagram' | 'SiteLeads'; // –î–ª—è single adset
    campaign_name: string;
    daily_budget_cents?: number; // –î–ª—è single adset
    adsets?: Array<{ // –î–ª—è multiple adsets
      user_creative_ids: string[];
      adset_name: string;
      daily_budget_cents: number;
    }>;
    use_default_settings?: boolean;
    auto_activate?: boolean;
  };
  selected_creatives?: Array<{
    user_creative_id: string;
    title: string;
    reason: string;
  }>;
  reasoning: string;
  estimated_cpl: number;
  confidence: 'high' | 'medium' | 'low';
};

// ========================================
// SYSTEM PROMPT
// ========================================

const CAMPAIGN_BUILDER_SYSTEM_PROMPT = `
–¢—ã ‚Äî Campaign Builder Agent, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –≤ Facebook/Instagram.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ –≤ –æ–¥–Ω–æ–º adset.

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
1. available_creatives ‚Äî —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å –∏—Ö —Å–∫–æ—Ä–∏–Ω–≥–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
2. budget_constraints ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. objective ‚Äî —Ü–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏ (whatsapp/instagram_traffic/site_leads)
4. user_context ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ö–†–ò–¢–ï–†–ò–ò –í–´–ë–û–†–ê –ö–†–ï–ê–¢–ò–í–û–í (—Ç–æ–ª—å–∫–æ –¥–ª—è –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò, –Ω–µ –¥–ª—è –æ—Ç–∫–∞–∑–∞):
1. **Risk Score** (0-100) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ö–û–ì–î–ê –ï–°–¢–¨ –í–´–ë–û–†:
   - 0-30 (Low risk) ‚Äî –æ—Ç–ª–∏—á–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚úÖ
   - 31-60 (Medium risk) ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ
   - 61-100 (High risk) ‚Äî –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã, –Ω–æ –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º

2. **Creative Score** (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ö–û–ì–î–ê –ï–°–¢–¨ –í–´–ë–û–†:
   - 70+ ‚Äî –æ—Ç–ª–∏—á–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã
   - 50-69 ‚Äî —Å—Ä–µ–¥–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã
   - <50 ‚Äî —Å–ª–∞–±—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã, –Ω–æ –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º

3. **Performance metrics** (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
   - CTR > 1.5% ‚Äî —Ö–æ—Ä–æ—à–∏–π
   - CPM < $6 ‚Äî —Ö–æ—Ä–æ—à–∏–π
   - CPL < target_cpl ‚Äî —Ö–æ—Ä–æ—à–∏–π

4. **–í–ê–ñ–ù–û**: –ï—Å–ª–∏ —É –∫—Ä–µ–∞—Ç–∏–≤–∞ –ù–ï–¢ scoring –¥–∞–Ω–Ω—ã—Ö ‚Äî —ç—Ç–æ –ù–ï –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞!
   - –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
   - –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä ‚Üí –¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞–º —Å–æ scoring

–õ–û–ì–ò–ö–ê –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø ADSET:
1. **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ adset**: $10/–¥–µ–Ω—å
2. **–ú–∏–Ω–∏–º—É–º –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤ adset**: 1 –∫—Ä–µ–∞—Ç–∏–≤ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç)
3. **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ**: 2-3 –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ adset (–¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
4. **–ú–∞–∫—Å–∏–º—É–º**: 5 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤ –æ–¥–Ω–æ–º adset

–°–¢–†–ê–¢–ï–ì–ò–Ø –°–û–ó–î–ê–ù–ò–Ø ADSETS:
1. **–ï—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ 1-4** ‚Üí —Å–æ–∑–¥–∞—Ç—å 1 adset —Å–æ –í–°–ï–ú–ò –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏
   - –í–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç adset
   - –ü—Ä–∏–º–µ—Ä: 1 –∫—Ä–µ–∞—Ç–∏–≤ + $45 = 1 adset —Å $45/–¥–µ–Ω—å
   - –ü—Ä–∏–º–µ—Ä: 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ + $45 = 1 adset —Å $45/–¥–µ–Ω—å
   
2. **–ï—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ 5-6** ‚Üí —Å–æ–∑–¥–∞—Ç—å 2 adset:
   - –†–∞–∑–¥–µ–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ—Ä–æ–≤–Ω—É (–ø–æ 2-3 –≤ –∫–∞–∂–¥–æ–º)
   - –†–∞–∑–¥–µ–ª–∏ –±—é–¥–∂–µ—Ç –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É adset
   - –ü—Ä–∏–º–µ—Ä: 6 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ + $45 = 2 adset –ø–æ $22.5 (–ø–æ 3 –∫—Ä–µ–∞—Ç–∏–≤–∞)
   
3. **–ï—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ 7+** ‚Üí —Å–æ–∑–¥–∞—Ç—å 2 adset:
   - –†–∞–∑–¥–µ–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã: –ª—É—á—à–∏–µ (low risk) vs —Ç–µ—Å—Ç–æ–≤—ã–µ (medium/high)
   - –†–∞–∑–¥–µ–ª–∏ –±—é–¥–∂–µ—Ç –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É adset
   - –ü—Ä–∏–º–µ—Ä: 8 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ + $100 = 2 adset –ø–æ $50 (–ø–æ 4 –∫—Ä–µ–∞—Ç–∏–≤–∞)

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ë–Æ–î–ñ–ï–¢–ê (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):
1. **–ò–°–ü–û–õ–¨–ó–£–ô –í–ï–°–¨ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç (available_budget_cents)** - —á–µ–º –±–æ–ª—å—à–µ –±—é–¥–∂–µ—Ç, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ!
2. –ú–∏–Ω–∏–º—É–º –Ω–∞ –ö–ê–ñ–î–´–ô adset: $10/–¥–µ–Ω—å (1000 —Ü–µ–Ω—Ç–æ–≤) - —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Facebook
3. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω requested_budget_cents ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –í–ï–°–¨ available_budget_cents
4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω requested_budget_cents ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–µ –º–µ–Ω—å—à–µ!)

–ü–†–ò–ú–ï–†–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:
- –ë—é–¥–∂–µ—Ç $45, 1 –∫—Ä–µ–∞—Ç–∏–≤ ‚Üí 1 adset —Å $45/–¥–µ–Ω—å ‚úÖ
- –ë—é–¥–∂–µ—Ç $45, 2 –∫—Ä–µ–∞—Ç–∏–≤–∞ ‚Üí 1 adset —Å $45/–¥–µ–Ω—å (–æ–±–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞) ‚úÖ
- –ë—é–¥–∂–µ—Ç $45, 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ ‚Üí 1 adset —Å $45/–¥–µ–Ω—å (–≤—Å–µ 3) ‚úÖ
- –ë—é–¥–∂–µ—Ç $45, 6 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ ‚Üí 2 adset –ø–æ $22.5 (–ø–æ 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ –∫–∞–∂–¥–æ–º) ‚úÖ
- –ë—é–¥–∂–µ—Ç $100, 4 –∫—Ä–µ–∞—Ç–∏–≤–∞ ‚Üí 2 adset –ø–æ $50 (–ø–æ 2 –∫—Ä–µ–∞—Ç–∏–≤–∞ –≤ –∫–∞–∂–¥–æ–º) ‚úÖ

–ü–†–ê–í–ò–õ–ê:
1. ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –í—ã–±–∏—Ä–∞–π –¢–û–õ–¨–ö–û –∫—Ä–µ–∞—Ç–∏–≤—ã —Å –Ω—É–∂–Ω—ã–º fb_creative_id –¥–ª—è objective
2. ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ö–∞–∂–¥—ã–π adset –º–∏–Ω–∏–º—É–º $10/–¥–µ–Ω—å (1000 —Ü–µ–Ω—Ç–æ–≤)
3. ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ò–°–ü–û–õ–¨–ó–£–ô –í–ï–°–¨ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç - –Ω–µ —ç–∫–æ–Ω–æ–º—å!
4. ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ù–µ –ø—Ä–µ–≤—ã—à–∞–π available_budget_cents
5. ‚úÖ –ï—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ 1-4 ‚Üí –æ–¥–∏–Ω adset —Å–æ –í–°–ï–ú –±—é–¥–∂–µ—Ç–æ–º
6. ‚úÖ –ï—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ 5+ ‚Üí —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 2 adset, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–≤ –±—é–¥–∂–µ—Ç –ø–æ—Ä–æ–≤–Ω—É
7. üí° –ü–†–ò–û–†–ò–¢–ï–¢ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã–±–æ—Ä–∞): Low risk > Medium risk > High risk
8. üí° –ü–†–ò–û–†–ò–¢–ï–¢ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—ã–±–æ—Ä–∞): –ö—Ä–µ–∞—Ç–∏–≤—ã —Å–æ scoring > –±–µ–∑ scoring
9. ‚ö†Ô∏è –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–º–ø–∞–Ω–∏—é –∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—Ä–µ–∞—Ç–∏–≤ ‚Üí —Å–æ–∑–¥–∞–≤–∞–π –∫–∞–º–ø–∞–Ω–∏—é –¥–∞–∂–µ –±–µ–∑ scoring –¥–∞–Ω–Ω—ã—Ö!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):

–í–∞—Ä–∏–∞–Ω—Ç 1: –û–î–ò–ù ADSET (–µ—Å–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –º–∞–ª–æ –∏–ª–∏ –±—é–¥–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω):
{
  "type": "CreateCampaignWithCreative",
  "params": {
    "user_creative_ids": ["uuid-1", "uuid-2", "uuid-3"],
    "objective": "WhatsApp",
    "campaign_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏",
    "daily_budget_cents": 1000,
    "use_default_settings": true,
    "auto_activate": false
  },
  "selected_creatives": [
    {
      "user_creative_id": "uuid-1",
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ 1",
      "reason": "Low risk (15), —Ö–æ—Ä–æ—à–∏–π CTR 2.3%"
    },
    {
      "user_creative_id": "uuid-2",
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ 2",
      "reason": "Medium risk (45), —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    },
    {
      "user_creative_id": "uuid-3",
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ 3",
      "reason": "–ù–æ–≤—ã–π –∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    }
  ],
  "reasoning": "–í—ã–±—Ä–∞–Ω–æ 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º adset. –ë—é–¥–∂–µ—Ç $10/–¥–µ–Ω—å –Ω–∞ 3 –∫—Ä–µ–∞—Ç–∏–≤–∞.",
  "estimated_cpl": 2.10,
  "confidence": "high"
}

–í–∞—Ä–∏–∞–Ω—Ç 2: –ù–ï–°–ö–û–õ–¨–ö–û ADSET (–µ—Å–ª–∏ –µ—Å—Ç—å 3+ –∫—Ä–µ–∞—Ç–∏–≤–∞ –∏ –±—é–¥–∂–µ—Ç $20+):
{
  "type": "CreateMultipleAdSets",
  "params": {
    "campaign_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏",
    "objective": "WhatsApp",
    "adsets": [
      {
        "user_creative_ids": ["uuid-1", "uuid-2", "uuid-3"],
        "adset_name": "Test 1",
        "daily_budget_cents": 1000
      },
      {
        "user_creative_ids": ["uuid-4", "uuid-5", "uuid-6"],
        "adset_name": "Test 2",
        "daily_budget_cents": 1000
      }
    ],
    "use_default_settings": true,
    "auto_activate": false
  },
  "selected_creatives": [
    {
      "user_creative_id": "uuid-1",
      "title": "–ö—Ä–µ–∞—Ç–∏–≤ 1",
      "reason": "Low risk –¥–ª—è Test 1"
    },
    ...–æ—Å—Ç–∞–ª—å–Ω—ã–µ 5 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
  ],
  "reasoning": "–°–æ–∑–¥–∞–Ω–æ 2 adset –ø–æ $10 –∫–∞–∂–¥—ã–π. Test 1 —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏, Test 2 —Å –Ω–æ–≤—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞. –ö–∞–∂–¥—ã–π adset –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è.",
  "estimated_cpl": 2.10,
  "confidence": "high"
}

–í–ê–ñ–ù–û:
- objective –≤ params –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "WhatsApp", "Instagram" –∏–ª–∏ "SiteLeads" (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã!)
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π adset: 1000 —Ü–µ–Ω—Ç–æ–≤ ($10)
- use_default_settings = true (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞)
- auto_activate = false (—Å–æ–∑–¥–∞–µ–º –≤ PAUSED –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
- –ò—Å–ø–æ–ª—å–∑—É–π CreateMultipleAdSets —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å 3+ –∫—Ä–µ–∞—Ç–∏–≤–∞ –ò –±—é–¥–∂–µ—Ç $20+

–ï–°–õ–ò –ù–ï–í–û–ó–ú–û–ñ–ù–û –°–û–ó–î–ê–¢–¨ –ö–ê–ú–ü–ê–ù–ò–Æ:
–í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "error" –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º:
{
  "error": "–ü—Ä–∏—á–∏–Ω–∞, –ø–æ—á–µ–º—É –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é",
  "suggestions": ["–°–æ–≤–µ—Ç 1", "–°–æ–≤–µ—Ç 2"]
}

–ü–†–ò–ú–ï–†–´ –ü–†–ò–ß–ò–ù –û–¢–ö–ê–ó–ê (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã):
- –ù–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –≤–æ–æ–±—â–µ (available_creatives –ø—É—Å—Ç–æ–π)
- –ù–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å fb_creative_id –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ objective
- –ë—é–¥–∂–µ—Ç –º–µ–Ω—å—à–µ $10 (–º–∏–Ω–∏–º—É–º –¥–ª—è –æ–¥–Ω–æ–≥–æ adset)
- ‚ùå –ù–ï –æ—Ç–∫–∞–∑—ã–≤–∞–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è scoring –¥–∞–Ω–Ω—ã—Ö!
- ‚ùå –ù–ï –æ—Ç–∫–∞–∑—ã–≤–∞–π –∏–∑-–∑–∞ High risk, –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –Ω–µ—Ç!

–ü–†–ò–ú–ï–†–´ –†–ï–®–ï–ù–ò–ô (—Å –ø–æ–ª–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞):

–ü—Ä–∏–º–µ—Ä 1: –ë—é–¥–∂–µ—Ç $45, 1 –∫—Ä–µ–∞—Ç–∏–≤ –ë–ï–ó scoring –¥–∞–Ω–Ω—ã—Ö
‚Üí ‚úÖ –°–æ–∑–¥–∞—Ç—å 1 adset —Å 1 –∫—Ä–µ–∞—Ç–∏–≤–æ–º ($45/–¥–µ–Ω—å)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –±—é–¥–∂–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ—Ä 2: –ë—é–¥–∂–µ—Ç $45, 2 –∫—Ä–µ–∞—Ç–∏–≤–∞ (low, medium)
‚Üí –°–æ–∑–¥–∞—Ç—å 1 adset —Å 2 –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ ($45/–¥–µ–Ω—å)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: –≤–µ—Å—å –±—é–¥–∂–µ—Ç –Ω–∞ A/B —Ç–µ—Å—Ç –¥–≤—É—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤

–ü—Ä–∏–º–µ—Ä 3: –ë—é–¥–∂–µ—Ç $45, 4 –∫—Ä–µ–∞—Ç–∏–≤–∞ (2 low, 2 medium)
‚Üí –°–æ–∑–¥–∞—Ç—å 1 adset —Å 4 –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ ($45/–¥–µ–Ω—å)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: 4 –∫—Ä–µ–∞—Ç–∏–≤–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ adset, –≤–µ—Å—å –±—é–¥–∂–µ—Ç

–ü—Ä–∏–º–µ—Ä 4: –ë—é–¥–∂–µ—Ç $45, 6 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ (3 low, 3 medium)
‚Üí –°–æ–∑–¥–∞—Ç—å 2 adset –ø–æ 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ ($22-23 –∫–∞–∂–¥—ã–π, –≤—Å–µ–≥–æ $45)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: –¥–µ–ª–∏–º –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ –±—é–¥–∂–µ—Ç –ø–æ—Ä–æ–≤–Ω—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

–ü—Ä–∏–º–µ—Ä 5: –ë—é–¥–∂–µ—Ç $100, 8 –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ (4 low, 4 medium)
‚Üí –°–æ–∑–¥–∞—Ç—å 2 adset –ø–æ 4 –∫—Ä–µ–∞—Ç–∏–≤–∞ ($50 –∫–∞–∂–¥—ã–π)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö –≥—Ä—É–ø–ø —Å –±–æ–ª—å—à–∏–º –±—é–¥–∂–µ—Ç–æ–º

–ü—Ä–∏–º–µ—Ä 6: –ë—é–¥–∂–µ—Ç $20, 3 –∫—Ä–µ–∞—Ç–∏–≤–∞ (1 low, 2 medium)
‚Üí –°–æ–∑–¥–∞—Ç—å 1 adset —Å 3 –∫—Ä–µ–∞—Ç–∏–≤–∞–º–∏ ($20/–¥–µ–Ω—å)
‚Üí –ü—Ä–∏—á–∏–Ω–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç
`;

// ========================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ë–û–†–ê –î–ê–ù–ù–´–•
// ========================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Facebook API
 */
export async function getActiveCampaigns(adAccountId: string, accessToken: string) {
  log.info({ adAccountId }, 'Fetching active campaigns for ad account');

  const normalizedAdAccountId = adAccountId.startsWith('act_') ? adAccountId : `act_${adAccountId}`;

  try {
    const response = await fetch(
      `https://graph.facebook.com/${FB_API_VERSION}/${normalizedAdAccountId}/campaigns?fields=id,name,status,effective_status,daily_budget,created_time&limit=500&access_token=${accessToken}`
    );

    if (!response.ok) {
      throw new Error(`Facebook API error: ${response.status}`);
    }

    const data = await response.json();
    const campaigns = data.data || [];

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log.debug({ campaigns: campaigns.map((c: any) => ({
      id: c.id,
      name: c.name,
      status: c.status,
      effective_status: c.effective_status
    })) }, 'Fetched campaigns statuses');

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ ACTIVE)
    const activeCampaigns = campaigns.filter(
      (c: any) => {
        const statusStr = String(c.status || c.effective_status || '');
        return statusStr.includes('ACTIVE');
      }
    );

    log.info({
      total: campaigns.length,
      active: activeCampaigns.length,
      campaignIds: activeCampaigns.map((c: any) => c.id),
    }, 'Found active campaigns');

    return activeCampaigns.map((c: any) => ({
      campaign_id: c.id,
      name: c.name,
      status: c.status,
      effective_status: c.effective_status,
      daily_budget: c.daily_budget,
      created_time: c.created_time,
    }));
  } catch (error: any) {
    log.error({ err: error, adAccountId }, 'Error fetching campaigns');
    throw new Error(`Failed to fetch campaigns: ${error.message}`);
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function pauseActiveCampaigns(
  campaigns: Array<{ campaign_id: string; name: string }>,
  accessToken: string
) {
  log.info({ campaignCount: campaigns.length }, 'Pausing active campaigns');

  const results = [];

  for (const campaign of campaigns) {
    try {
      const response = await fetch(
        `https://graph.facebook.com/${FB_API_VERSION}/${campaign.campaign_id}?access_token=${accessToken}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'PAUSED',
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Facebook API error: ${JSON.stringify(errorData)}`);
      }

      const data = await response.json();

      log.info({
        campaignId: campaign.campaign_id,
        newStatus: data.success,
      }, 'Paused campaign');

      results.push({
        campaign_id: campaign.campaign_id,
        name: campaign.name,
        success: true,
      });
    } catch (error: any) {
      log.error({ err: error, campaignId: campaign.campaign_id }, 'Failed to pause campaign');
      results.push({
        campaign_id: campaign.campaign_id,
        name: campaign.name,
        success: false,
        error: error.message,
      });
    }
  }

  const successCount = results.filter((r) => r.success).length;
  log.info({
    total: campaigns.length,
    success: successCount,
    failed: campaigns.length - successCount,
  }, 'Paused campaigns result');

  return results;
}

export async function getActiveAdSets(
  campaignId: string,
  accessToken: string
): Promise<Array<{ adset_id: string; name?: string; status?: string; effective_status?: string; optimized_goal?: string }>> {
  log.info({ campaignId }, 'Fetching active ad sets for campaign');

  try {
    const response = await fetch(
      `https://graph.facebook.com/${FB_API_VERSION}/${campaignId}/adsets?fields=id,name,status,effective_status,optimized_goal&limit=200&access_token=${accessToken}`
    );

    if (!response.ok) {
      throw new Error(`Facebook API error: ${response.status}`);
    }

    const data = await response.json();
    const adsets: Array<any> = data.data || [];

    const activeAdsets = adsets.filter((adset: any) => {
      const statusStr = String(adset.status || adset.effective_status || '');
      return statusStr.includes('ACTIVE');
    });

    log.info({ count: activeAdsets.length, campaignId }, 'Found active ad sets');

    return activeAdsets.map((adset: any) => ({
      adset_id: adset.id,
      name: adset.name,
      status: adset.status,
      effective_status: adset.effective_status,
      optimized_goal: adset.optimized_goal
    }));
  } catch (error: any) {
    log.error({ err: error, campaignId }, 'Error fetching ad sets');
    throw new Error(`Failed to fetch ad sets: ${error.message}`);
  }
}

export async function pauseAdSetsForCampaign(
  campaignId: string,
  accessToken: string
): Promise<void> {
  const adsets = await getActiveAdSets(campaignId, accessToken);
  log.info({ campaignId, count: adsets.length }, 'Pausing ad sets for campaign');

  for (const adset of adsets) {
    try {
      const response = await fetch(
        `https://graph.facebook.com/${FB_API_VERSION}/${adset.adset_id}?access_token=${accessToken}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'PAUSED' }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Facebook API error: ${JSON.stringify(errorData)}`);
      }

      log.info({ adsetId: adset.adset_id, campaignId }, 'Paused ad set');
    } catch (error: any) {
      log.warn({ err: error, adsetId: adset.adset_id, campaignId }, 'Failed to pause ad set');
    }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö —Å–∫–æ—Ä–∏–Ω–≥–æ–º
 */
export async function getAvailableCreatives(
  userAccountId: string,
  objective?: CampaignObjective,
  directionId?: string
): Promise<AvailableCreative[]> {
  log.info({ userAccountId, directionId }, 'Fetching available creatives for direction');

  let creatives: any[];

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ –Ω–µ–º—É
  if (directionId) {
    const { data, error: creativesError } = await supabase
      .from('user_creatives')
      .select(`
        id,
        user_id,
        title,
        fb_video_id,
        fb_creative_id_whatsapp,
        fb_creative_id_instagram_traffic,
        fb_creative_id_site_leads,
        status,
        is_active,
        created_at,
        updated_at,
        direction_id,
        media_type,
        fb_image_hash
      `)
      .eq('user_id', userAccountId)
      .eq('direction_id', directionId)
      .eq('status', 'ready')
      .eq('is_active', true)
      .order('created_at', { ascending: false });

    if (creativesError) {
      log.error({ err: creativesError, userAccountId, directionId, objective }, 'Error fetching direction creatives');
      throw new Error(`Failed to fetch creatives: ${creativesError.message}`);
    }

    if (!data || data.length === 0) {
      log.warn({ userAccountId, directionId, objective }, 'No ready creatives found for direction');
      return [];
    }

    log.info({ userAccountId, directionId, count: data.length }, 'Found ready creatives for direction');
    creatives = data;
  } else {
    // Legacy: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    const { data, error: creativesError } = await supabase
      .from('user_creatives')
      .select('*')
      .eq('user_id', userAccountId)
      .eq('status', 'ready')
      .is('direction_id', null)  // –¢–æ–ª—å–∫–æ –∫—Ä–µ–∞—Ç–∏–≤—ã –ë–ï–ó –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      .order('created_at', { ascending: false });

    if (creativesError) {
      log.error({ err: creativesError, userAccountId, objective }, 'Error fetching creatives');
      throw new Error(`Failed to fetch creatives: ${creativesError.message}`);
    }

    if (!data || data.length === 0) {
      log.warn({ userAccountId, objective }, 'No ready creatives found for user');
      return [];
    }

    log.info({ userAccountId, objective, count: data.length }, 'Found ready creatives (legacy)');
    creatives = data;
  }

  // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤ (—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –±–µ–∑)

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ objective (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
  let filteredCreatives = creatives;
  if (objective) {
    filteredCreatives = creatives.filter((c) => {
      switch (objective) {
        case 'whatsapp':
          return !!c.fb_creative_id_whatsapp;
        case 'instagram_traffic':
          return !!c.fb_creative_id_instagram_traffic;
        case 'site_leads':
          return !!c.fb_creative_id_site_leads;
        default:
          return false;
      }
    });
    log.info({ count: filteredCreatives.length, objective }, 'Filtered creatives for objective');
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä—ã –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const creativeIds = filteredCreatives.map((c) => {
    switch (objective) {
      case 'whatsapp':
        return c.fb_creative_id_whatsapp;
      case 'instagram_traffic':
        return c.fb_creative_id_instagram_traffic;
      case 'site_leads':
        return c.fb_creative_id_site_leads;
      default:
        return null;
    }
  }).filter(Boolean);

  const { data: scores, error: scoresError } = await supabase
    .from('creative_scores')
    .select('*')
    .eq('user_account_id', userAccountId)
    .eq('level', 'creative')
    .in('creative_id', creativeIds as string[])
    .order('date', { ascending: false });

  if (scoresError) {
    log.warn({ err: scoresError, userAccountId }, 'Error fetching scores');
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫—Ä–µ–∞—Ç–∏–≤—ã —Å–æ —Å–∫–æ—Ä–∞–º–∏
  const result: AvailableCreative[] = filteredCreatives.map((creative) => {
    let fbCreativeId: string | null = null;
    switch (objective) {
      case 'whatsapp':
        fbCreativeId = creative.fb_creative_id_whatsapp;
        break;
      case 'instagram_traffic':
        fbCreativeId = creative.fb_creative_id_instagram_traffic;
        break;
      case 'site_leads':
        fbCreativeId = creative.fb_creative_id_site_leads;
        break;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞
    const score = scores?.find((s) => s.creative_id === fbCreativeId);

    return {
      user_creative_id: creative.id,
      title: creative.title,
      fb_creative_id_whatsapp: creative.fb_creative_id_whatsapp,
      fb_creative_id_instagram_traffic: creative.fb_creative_id_instagram_traffic,
      fb_creative_id_site_leads: creative.fb_creative_id_site_leads,
      created_at: creative.created_at,
      // Scoring data
      risk_score: score?.risk_score,
      risk_level: score?.risk_level,
      creative_score: score?.creative_score,
      recommendations: score?.recommendations,
      // Performance –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    };
  });

  log.info({ count: result.length }, 'Prepared creatives with scoring data');
  return result;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –±—é–¥–∂–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getBudgetConstraints(
  userAccountId: string, 
  directionId?: string
): Promise<BudgetConstraints> {
  log.info({ userAccountId, directionId }, 'Fetching budget constraints');

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –±–µ—Ä—ë–º –±—é–¥–∂–µ—Ç –∏ CPL –∏–∑ –Ω–µ–≥–æ
  if (directionId) {
    const { data: direction, error: directionError } = await supabase
      .from('account_directions')
      .select('daily_budget_cents, target_cpl_cents')
      .eq('id', directionId)
      .single();

    if (directionError || !direction) {
      log.error({ err: directionError, directionId }, 'Error fetching direction budget constraints');
      throw new Error(`Failed to fetch direction: ${directionError?.message || 'not found'}`);
    }

    const planDailyBudget = direction.daily_budget_cents;
    const targetCpl = direction.target_cpl_cents;

    const constraints: BudgetConstraints = {
      plan_daily_budget_cents: planDailyBudget,
      available_budget_cents: planDailyBudget,
      default_cpl_target_cents: targetCpl,
      min_budget_per_campaign_cents: 1000, // $10/–¥–µ–Ω—å –º–∏–Ω–∏–º—É–º
      max_budget_per_campaign_cents: Math.min(30000, planDailyBudget),
    };

    log.info({
      directionId,
      dailyBudgetCents: direction.daily_budget_cents,
      targetCplCents: direction.target_cpl_cents,
    }, 'Direction budget constraints loaded');

    return constraints;
  }

  // Legacy: –±–µ—Ä—ë–º –∏–∑ user_accounts (–µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
  const { data: userAccount, error } = await supabase
    .from('user_accounts')
    .select('plan_daily_budget_cents, default_cpl_target_cents')
    .eq('id', userAccountId)
    .single();

  if (error || !userAccount) {
    log.error({ err: error, userAccountId }, 'Error fetching user account for budget constraints');
    throw new Error(`Failed to fetch user account: ${error?.message || 'not found'}`);
  }

  const planDailyBudget = userAccount.plan_daily_budget_cents || 5000000; // $500/–¥–µ–Ω—å –¥–µ—Ñ–æ–ª—Ç
  const targetCpl = userAccount.default_cpl_target_cents || 200; // $2 –¥–µ—Ñ–æ–ª—Ç

  // –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
  // TODO: —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∏—Ö –±—é–¥–∂–µ—Ç—ã
  const availableBudget = planDailyBudget;

  const constraints: BudgetConstraints = {
    plan_daily_budget_cents: planDailyBudget,
    available_budget_cents: availableBudget,
    default_cpl_target_cents: targetCpl,
    min_budget_per_campaign_cents: 1000, // $10/–¥–µ–Ω—å –º–∏–Ω–∏–º—É–º (–¥–ª—è –æ–¥–Ω–æ–≥–æ adset)
    max_budget_per_campaign_cents: Math.min(30000, planDailyBudget), // –ú–∞–∫—Å–∏–º—É–º $300 –∏–ª–∏ –ø–ª–∞–Ω
  };

  log.info({ constraints: constraints }, 'Budget constraints resolved');

  return constraints;
}

// ========================================
// LLM INTERACTION
// ========================================

/**
 * –í—ã–∑–æ–≤ LLM –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è action –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function buildCampaignAction(input: CampaignBuilderInput): Promise<CampaignAction> {
  const { user_account_id, objective, direction_id, campaign_name, requested_budget_cents, additional_context } = input;

  const { data: userAccountProfile } = await supabase
    .from('user_accounts')
    .select('username')
    .eq('id', user_account_id)
    .single();

  const availableCreatives = await getAvailableCreatives(user_account_id, objective, direction_id);
  const budgetConstraints = await getBudgetConstraints(user_account_id, direction_id);

  if (availableCreatives.length === 0) {
    throw new Error('No ready creatives available for this objective');
  }

  log.info({
    userAccountId: user_account_id,
    userAccountName: userAccountProfile?.username,
    objective,
    directionId: direction_id,
    creativeCount: availableCreatives.length,
    requestedBudgetCents: requested_budget_cents,
  }, 'Building campaign action');

  const llmInput = {
    available_creatives: availableCreatives.map((c) => ({
      user_creative_id: c.user_creative_id,
      title: c.title,
      created_at: c.created_at,
      risk_score: c.risk_score,
      risk_level: c.risk_level,
      creative_score: c.creative_score,
      recommendations: c.recommendations,
      performance: c.performance,
    })),
    budget_constraints: {
      available_budget_cents: budgetConstraints.available_budget_cents,
      available_budget_usd: budgetConstraints.available_budget_cents / 100,
      min_budget_cents: budgetConstraints.min_budget_per_campaign_cents,
      min_budget_usd: budgetConstraints.min_budget_per_campaign_cents / 100,
      max_budget_cents: budgetConstraints.max_budget_per_campaign_cents,
      max_budget_usd: budgetConstraints.max_budget_per_campaign_cents / 100,
      target_cpl_cents: budgetConstraints.default_cpl_target_cents,
      target_cpl_usd: budgetConstraints.default_cpl_target_cents / 100,
    },
    objective: objectiveToLLMFormat(objective),
    requested_campaign_name: campaign_name,
    requested_budget_cents,
    user_context: additional_context,
  };

  log.debug({
    creativesCount: llmInput.available_creatives.length,
    budgetConstraints: llmInput.budget_constraints,
  }, 'LLM input prepared');

  // –í—ã–∑–æ–≤ OpenAI API
  const openaiApiKey = process.env.OPENAI_API_KEY;
  if (!openaiApiKey) {
    throw new Error('OPENAI_API_KEY not configured');
  }

  const model = process.env.CAMPAIGN_BUILDER_MODEL || 'gpt-4o';

  log.info({ model }, 'Calling OpenAI API');

  const response = await fetch('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${openaiApiKey}`,
    },
    body: JSON.stringify({
      model,
      input: [
        {
          role: 'system',
          content: [{ type: 'input_text', text: CAMPAIGN_BUILDER_SYSTEM_PROMPT }],
        },
        {
          role: 'user',
          content: [
            {
              type: 'input_text',
              text: `–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n${JSON.stringify(llmInput, null, 2)}`,
            },
          ],
        },
      ],
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    log.error({ status: response.status, body: errorText, resolution: resolveFacebookError({ status: response.status }) }, 'OpenAI API error');
    throw new Error(`OpenAI API error: ${response.status} ${errorText}`);
  }

  const apiResponse = await response.json();
  log.info('OpenAI API response received');

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ Responses API
  const message = apiResponse.output?.find((o: any) => o.type === 'message');
  const textContent = message?.content?.find((c: any) => c.type === 'output_text');
  const rawText = textContent?.text || '';

  if (!rawText) {
    log.error('Empty response from LLM');
    throw new Error('Empty response from LLM');
  }

  log.debug({ preview: rawText.substring(0, 500) }, 'LLM response preview');

  // –ü–∞—Ä—Å–∏–º JSON
  let action: any;
  try {
    // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å markdown –æ–±–µ—Ä—Ç–∫–∞)
    const jsonMatch = rawText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('No JSON found in response');
    }
    action = JSON.parse(jsonMatch[0]);
  } catch (parseError: any) {
    log.error({ err: parseError }, 'Failed to parse LLM response');
    throw new Error(`Failed to parse LLM response: ${parseError.message}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
  if (action.error) {
    log.warn({ llmError: action.error }, 'LLM returned error');
    throw new Error(`Campaign Builder: ${action.error}`);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è action
  if (action.type !== 'CreateCampaignWithCreative' && action.type !== 'CreateMultipleAdSets') {
    log.error({ action }, 'Invalid action type from LLM');
    throw new Error('LLM returned invalid action type');
  }

  if (!action.params || !action.params.campaign_name) {
    log.error({ action }, 'Invalid action structure from LLM');
    throw new Error('Invalid action structure from LLM');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è single adset
  if (action.type === 'CreateCampaignWithCreative') {
    if (!action.params.user_creative_ids || !action.params.objective || !action.params.daily_budget_cents) {
      log.error({ params: action.params }, 'Invalid single adset params');
      throw new Error('Invalid single adset params from LLM');
    }
    if (action.params.user_creative_ids.length === 0) {
      throw new Error('No creatives selected by LLM');
    }
    if (action.params.daily_budget_cents < 1000) {
      throw new Error('Budget less than minimum $10 per adset');
    }
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ objective –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª –≤ –¥—Ä—É–≥–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    action.params.objective = objectiveToLLMFormat(objective);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è multiple adsets
  if (action.type === 'CreateMultipleAdSets') {
    if (!action.params.adsets || action.params.adsets.length === 0) {
      throw new Error('No adsets defined for CreateMultipleAdSets');
    }
    for (const adset of action.params.adsets) {
      if (!adset.user_creative_ids || adset.user_creative_ids.length === 0) {
        throw new Error('Adset has no creatives');
      }
      if (adset.daily_budget_cents < 1000) {
        throw new Error(`Adset budget less than minimum $10: ${adset.adset_name}`);
      }
    }
  }

  if (action.type === 'CreateCampaignWithCreative') {
    log.info({ adsetCount: action.params.adsets?.length || 0 }, 'Campaign action created (single adset)');
  } else {
    log.info({ adsetCount: action.params.adsets?.length || 0 }, 'Campaign action created (multiple adsets)');
  }

  return action as CampaignAction;
}

// ========================================
// HELPERS
// ========================================

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å campaign action –≤ envelope –¥–ª—è POST /api/agent/actions
 */
export function convertActionToEnvelope(
  action: CampaignAction, 
  userAccountId: string, 
  objective: CampaignObjective,
  whatsappPhoneNumber?: string
) {
  const idempotencyKey = `campaign-builder-${Date.now()}-${Math.random().toString(36).substring(7)}`;

  // –î–ª—è single adset - –æ–¥–∏–Ω action
  if (action.type === 'CreateCampaignWithCreative') {
    return {
      idempotencyKey,
      account: {
        userAccountId,
        ...(whatsappPhoneNumber && { whatsappPhoneNumber }),
      },
      actions: [
        {
          type: action.type,
          params: action.params,
        },
      ],
      source: 'campaign-builder',
    };
  }

  // –î–ª—è multiple adsets - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ actions CreateCampaignWithCreative
  // –ö–∞–∂–¥—ã–π adset —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è
  if (action.type === 'CreateMultipleAdSets' && action.params.adsets) {
    const actions = action.params.adsets.map((adset, index) => ({
      type: 'CreateCampaignWithCreative' as const,
      params: {
        user_creative_ids: adset.user_creative_ids,
        objective: objectiveToLLMFormat(objective), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è actions
        campaign_name: `${action.params.campaign_name} - ${adset.adset_name}`,
        daily_budget_cents: adset.daily_budget_cents,
        use_default_settings: action.params.use_default_settings ?? true,
        auto_activate: action.params.auto_activate ?? false,
      },
    }));

    return {
      idempotencyKey,
      account: {
        userAccountId,
        ...(whatsappPhoneNumber && { whatsappPhoneNumber }),
      },
      actions,
      source: 'campaign-builder',
    };
  }

  throw new Error('Invalid action type for envelope conversion');
}

// ========================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø AUTO-LAUNCH-V2 (–†–ê–ë–û–¢–ê –° –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò)
// ========================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export async function getDefaultSettings(directionId: string) {
  const { data, error } = await supabase
    .from('default_ad_settings')
    .select('*')
    .eq('direction_id', directionId)
    .maybeSingle();

  if (error) {
    log.error({ err: error, directionId }, 'Error fetching default settings');
    return null;
  }

  return data;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function buildTargeting(defaultSettings: any, objective: CampaignObjective) {
  if (!defaultSettings) {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç
    return {
      geo_locations: { countries: ['RU'] },
      age_min: 18,
      age_max: 65,
    };
  }

  const targeting: any = {
    age_min: defaultSettings.age_min || 18,
    age_max: defaultSettings.age_max || 65,
  };

  // –ü–æ–ª
  if (defaultSettings.gender && defaultSettings.gender !== 'all') {
    targeting.genders = defaultSettings.gender === 'male' ? [1] : [2];
  }

  // –ì–µ–æ-–ª–æ–∫–∞—Ü–∏–∏ (—á–∏—Ç–∞–µ–º –∏–∑ –ø–æ–ª—è cities –≤ –ë–î)
  if (defaultSettings.cities && Array.isArray(defaultSettings.cities) && defaultSettings.cities.length > 0) {
    const countries: string[] = [];
    const cities: string[] = [];
    
    for (const item of defaultSettings.cities) {
      if (typeof item === 'string' && item.length === 2 && item === item.toUpperCase()) {
        // 2 –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã = –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (RU, KZ, BY, US)
        countries.push(item);
      } else {
        // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ = ID –≥–æ—Ä–æ–¥–∞
        cities.push(item);
      }
    }
    
    targeting.geo_locations = {};
    
    if (countries.length > 0) {
      targeting.geo_locations.countries = countries;
    }
    
    if (cities.length > 0) {
      targeting.geo_locations.cities = cities.map((cityId: string) => ({
        key: cityId,
      }));
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–æ—Å—Å–∏—è
    if (countries.length === 0 && cities.length === 0) {
      targeting.geo_locations.countries = ['RU'];
    }
  } else {
    // Default: —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –Ω–∞ –†–æ—Å—Å–∏—é
    targeting.geo_locations = { countries: ['RU'] };
  }

  return targeting;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å optimization_goal –¥–ª—è objective
 */
export function getOptimizationGoal(objective: CampaignObjective): string {
  switch (objective) {
    case 'whatsapp':
      return 'CONVERSATIONS';
    case 'instagram_traffic':
      return 'LINK_CLICKS';
    case 'site_leads':
      return 'LEAD_GENERATION';
    default:
      return 'CONVERSATIONS';
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å billing_event –¥–ª—è objective
 */
export function getBillingEvent(objective: CampaignObjective): string {
  switch (objective) {
    case 'whatsapp':
      return 'IMPRESSIONS';
    case 'instagram_traffic':
      return 'IMPRESSIONS';
    case 'site_leads':
      return 'IMPRESSIONS';
    default:
      return 'IMPRESSIONS';
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å Ad Set –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function createAdSetInCampaign(params: {
  campaignId: string;
  adAccountId: string;
  accessToken: string;
  name: string;
  dailyBudget: number;
  targeting: any;
  optimization_goal: string;
  billing_event: string;
  promoted_object?: any;
  start_mode?: 'now' | 'midnight_almaty';
}) {
  const { campaignId, adAccountId, accessToken, name, dailyBudget, targeting, optimization_goal, billing_event, promoted_object } = params;

  const normalizedAdAccountId = adAccountId.startsWith('act_') ? adAccountId : `act_${adAccountId}`;

  log.info({ campaignId, name, dailyBudget, optimizationGoal: optimization_goal }, 'Creating ad set in campaign');

  // –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–ª–Ω–æ—á—å Asia/Almaty (+05:00)
  function formatWithOffset(date: Date, offsetMin: number) {
    const pad = (n: number) => String(n).padStart(2, '0');
    const y = date.getFullYear();
    const m = pad(date.getMonth() + 1);
    const d = pad(date.getDate());
    const hh = pad(date.getHours());
    const mm = pad(date.getMinutes());
    const ss = pad(date.getSeconds());
    const sign = offsetMin >= 0 ? '+' : '-';
    const abs = Math.abs(offsetMin);
    const oh = pad(Math.floor(abs / 60));
    const om = pad(abs % 60);
    return `${y}-${m}-${d}T${hh}:${mm}:${ss}${sign}${oh}:${om}`;
  }
  const tzOffsetMin = 5 * 60;
  const nowUtcMs = Date.now() + (new Date().getTimezoneOffset() * 60000);
  const localNow = new Date(nowUtcMs + tzOffsetMin * 60000);
  let m = new Date(localNow);
  m.setHours(0, 0, 0, 0);
  if (m <= localNow) m = new Date(m.getTime() + 24 * 60 * 60 * 1000);
  const start_time = formatWithOffset(m, tzOffsetMin);

  const body: any = {
    access_token: accessToken,
    name,
    campaign_id: campaignId,
    daily_budget: dailyBudget,
    billing_event,
    optimization_goal,
    bid_strategy: 'LOWEST_COST_WITHOUT_CAP',
    targeting,
    status: 'ACTIVE',
  };

  if ((params.start_mode || 'midnight_almaty') === 'midnight_almaty') {
    body.start_time = start_time;
  }

  // –î–ª—è WhatsApp –¥–æ–±–∞–≤–ª—è–µ–º destination_type
  if (optimization_goal === 'CONVERSATIONS' && promoted_object?.whatsapp_phone_number) {
    body.destination_type = 'WHATSAPP';
  }

  if (promoted_object) {
    body.promoted_object = promoted_object;
  }

  const response = await fetch(
    `https://graph.facebook.com/${FB_API_VERSION}/${normalizedAdAccountId}/adsets`,
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    }
  );

  if (!response.ok) {
    const error = await response.json();
    log.error({ err: error, campaignId, name }, 'Failed to create ad set');
    throw new Error(`Failed to create ad set: ${JSON.stringify(error)}`);
  }

  const result = await response.json();
  log.info({ adsetId: result.id }, 'Ad set created successfully');
  return result;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å creative ID –¥–ª—è objective
 */
export function getCreativeIdForObjective(creative: AvailableCreative, objective: CampaignObjective): string | null {
  switch (objective) {
    case 'whatsapp':
      return creative.fb_creative_id_whatsapp;
    case 'instagram_traffic':
      return creative.fb_creative_id_instagram_traffic;
    case 'site_leads':
      return creative.fb_creative_id_site_leads;
    default:
      return null;
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å Ads –≤ Ad Set
 */
export async function createAdsInAdSet(params: {
  adsetId: string;
  adAccountId: string;
  creatives: AvailableCreative[];
  accessToken: string;
  objective: CampaignObjective;
}) {
  const { adsetId, adAccountId, creatives, accessToken, objective } = params;

  const normalizedAdAccountId = adAccountId.startsWith('act_') ? adAccountId : `act_${adAccountId}`;

  log.info({ adsetId, creativeCount: creatives.length }, 'Creating ads in ad set');

  const ads = [];

  for (const creative of creatives) {
    const creativeId = getCreativeIdForObjective(creative, objective);
    
    if (!creativeId) {
      log.warn({ creativeId: creative.user_creative_id, objective }, 'No Facebook creative ID for creative');
      continue;
    }

    try {
      const response = await fetch(
        `https://graph.facebook.com/${FB_API_VERSION}/${normalizedAdAccountId}/ads`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            access_token: accessToken,
            name: `Ad - ${creative.title}`,
            adset_id: adsetId,
            creative: { creative_id: creativeId },
            status: 'ACTIVE',
          }),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        log.error({ err: error, creativeId: creative.user_creative_id }, 'Failed to create ad');
        continue;
      }

      const ad = await response.json();
      log.info({ adId: ad.id, creativeId: creative.user_creative_id }, 'Ad created successfully');
      ads.push(ad);
    } catch (error: any) {
      log.error({ err: error, adsetId, creativeId: creative.user_creative_id }, 'Error creating ad');
    }
  }

  return ads;
}

