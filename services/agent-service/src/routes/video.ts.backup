import { FastifyPluginAsync } from 'fastify';
import multipart from '@fastify/multipart';
import { promises as fs } from 'fs';
import { randomUUID } from 'crypto';
import path from 'path';
import { z } from 'zod';
import { supabase } from '../lib/supabase.js';
import { processVideoTranscription } from '../lib/transcription.js';
import {
  uploadVideo,
  createWhatsAppCreative,
  createInstagramCreative,
  createWebsiteLeadsCreative
} from '../adapters/facebook.js';

const ProcessVideoSchema = z.object({
  user_id: z.string().uuid(),
  title: z.string().optional(),
  description: z.string().optional(),
  language: z.string().default('ru'),
  client_question: z.string().optional(),
  site_url: z.string().url().optional(),
  utm: z.string().optional()
});

type ProcessVideoBody = z.infer<typeof ProcessVideoSchema>;

function normalizeAdAccountId(adAccountId: string): string {
  if (!adAccountId) return '';
  const id = String(adAccountId).trim();
  return id.startsWith('act_') ? id : `act_${id}`;
}

export const videoRoutes: FastifyPluginAsync = async (app) => {
  await app.register(multipart, {
    limits: {
      fileSize: 500 * 1024 * 1024,
    }
  });

  app.post('/process-video', async (request, reply) => {
    let videoPath: string | null = null;

    try {
      app.log.info('=== START: process-video endpoint hit ===');
      
      const parts = request.parts();
      app.log.info('=== STEP 1: Got parts iterator ===');
      
      let videoBuffer: Buffer | null = null;
      let bodyData: Partial<ProcessVideoBody> = {};
      let partCount = 0;

      for await (const part of parts) {
        partCount++;
        app.log.info(`=== STEP 2.${partCount}: Processing part - type: ${part.type}, fieldname: ${(part as any).fieldname || 'N/A'} ===`);
        
        if (part.type === 'file' && part.fieldname === 'file') {
          app.log.info('=== STEP 3: Found video file, converting to buffer... ===');
          videoBuffer = await part.toBuffer();
          app.log.info(`=== STEP 4: Video buffer ready, size: ${videoBuffer.length} bytes (${(videoBuffer.length / 1024 / 1024).toFixed(2)} MB) ===`);
        } else if (part.type === 'field') {
          (bodyData as any)[part.fieldname] = part.value;
          app.log.info(`=== STEP 3: Field collected - ${part.fieldname}: ${part.value} ===`);
        }
      }

      app.log.info(`=== STEP 5: All parts processed (total: ${partCount}) ===`);

      if (!videoBuffer) {
        app.log.error('=== ERROR: No video buffer found ===');
        return reply.status(400).send({
          success: false,
          error: 'Video file is required'
        });
      }

      app.log.info('=== STEP 6: Validating body data ===');
      const body = ProcessVideoSchema.parse(bodyData);

      app.log.info(`=== STEP 7: Fetching user account data for user_id: ${body.user_id} ===`);
      
      const { data: userAccount, error: userError } = await supabase
        .from('user_accounts')
        .select('id, access_token, ad_account_id, page_id, instagram_id, instagram_username, whatsapp_phone_number')
        .eq('id', body.user_id)
        .single();

      if (userError || !userAccount) {
        app.log.error({ userError }, 'User account lookup failed');
        return reply.status(404).send({
          success: false,
          error: 'User account not found',
          details: userError?.message
        });
      }

      const token_preview = userAccount.access_token.substring(0, 20) + '...';
      app.log.info('User account found. Token: ' + token_preview);

      const normalizedAdAccountId = normalizeAdAccountId(userAccount.ad_account_id);

      const tempVideoPath = path.join('/tmp', randomUUID() + '.mp4');
      await fs.writeFile(tempVideoPath, videoBuffer);
      videoPath = tempVideoPath;

      app.log.info('Starting video transcription...');
      const transcript = await processVideoTranscription(tempVideoPath, body.language);
      app.log.info('Transcription completed: ' + transcript.text.substring(0, 100) + '...');

      app.log.info('Uploading video to Facebook...');
      const fbVideoResult = await uploadVideo(
        normalizedAdAccountId,
        userAccount.access_token,
        videoBuffer
      );
      const fbVideoId = fbVideoResult.id;
      app.log.info('Video uploaded to Facebook: ' + fbVideoId);

      app.log.info('Creating creatives...');
      
      const whatsappCreative = await createWhatsAppCreative(
        normalizedAdAccountId,
        userAccount.access_token,
        {
          videoId: fbVideoId,
          pageId: userAccount.page_id,
          instagramId: userAccount.instagram_id,
          message: body.description || transcript.text.substring(0, 100),
          clientQuestion: body.client_question || 'Здравствуйте! Интересует ваше предложение.',,
          whatsappPhoneNumber: userAccount.whatsapp_phone_number || undefined
        }
      );

      const instagramCreative = await createInstagramCreative(
        normalizedAdAccountId,
        userAccount.access_token,
        {
          videoId: fbVideoId,
          pageId: userAccount.page_id,
          instagramId: userAccount.instagram_id,
          instagramUsername: userAccount.instagram_username || '',
          message: body.description || transcript.text.substring(0, 100)
        }
      );

      const websiteCreative = await createWebsiteLeadsCreative(
        normalizedAdAccountId,
        userAccount.access_token,
        {
          videoId: fbVideoId,
          pageId: userAccount.page_id,
          instagramId: userAccount.instagram_id,
          message: body.description || transcript.text.substring(0, 100),
          siteUrl: body.site_url || 'https://example.com',
          utm: body.utm
        }
      );

      const { data: creativeRecord, error: creativeError } = await supabase
        .from('user_creatives')
        .insert({
          user_id: body.user_id,
          title: body.title || 'Untitled',
          fb_video_id: fbVideoId,
          fb_creative_id_whatsapp: whatsappCreative.id,
          fb_creative_id_instagram_traffic: instagramCreative.id,
          fb_creative_id_site_leads: websiteCreative.id,
          status: 'ready'
        })
        .select()
        .single();

      if (creativeError) {
        throw new Error('Failed to save creative: ' + creativeError.message);
      }

      const { error: transcriptError } = await supabase
        .from('creative_transcripts')
        .insert({
          creative_id: creativeRecord.id,
          lang: body.language,
          source: 'whisper',
          text: transcript.text,
          duration_sec: transcript.duration ? Math.round(transcript.duration) : null,
          status: 'ready'
        });

      if (transcriptError) {
        app.log.warn('Failed to save transcript: ' + transcriptError.message);
      }

      app.log.info('Video processing completed successfully');

      return reply.send({
        success: true,
        message: 'Video processed successfully',
        data: {
          creative_id: creativeRecord.id,
          fb_video_id: fbVideoId,
          fb_creative_id_whatsapp: whatsappCreative.id,
          fb_creative_id_instagram_traffic: instagramCreative.id,
          fb_creative_id_site_leads: websiteCreative.id,
          transcript: transcript.text
        }
      });

    } catch (error: any) {
      app.log.error({ error: error, stack: error?.stack, message: error?.message }, 'Error processing video');

      if (error.fb) {
        return reply.status(500).send({
          success: false,
          error: error.message,
          facebook_error: error.fb
        });
      }

      if (error instanceof z.ZodError) {
        return reply.status(400).send({
          success: false,
          error: 'Validation error',
          details: error.errors
        });
      }

      return reply.status(500).send({
        success: false,
          error: error.message || 'Internal server error'
      });

    } finally {
      if (videoPath) {
        try {
          await fs.unlink(videoPath);
          app.log.info('Temporary video file deleted');
        } catch (err: any) {
          app.log.error('Failed to delete video file:', err?.message || err);
        }
      }
    }
  });
};
