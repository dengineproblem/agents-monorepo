import { supabase } from '@/integrations/supabase/client';

export interface SaleData {
  client_phone: string;
  amount: number;
  business_id: string;
  created_at?: string;
  // –ü–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
  manual_source_id?: string;
  manual_campaign_name?: string;
  manual_creative_url?: string;
}

export interface ROIData {
  totalRevenue: number;
  totalSpend: number;
  totalROI: number;
  totalLeads: number;
  totalConversions: number;
  campaigns: CampaignROI[];
}

export interface CampaignROI {
  id: string;
  name: string;
  creative_url: string;
  spend: number;
  revenue: number;
  roi: number;
  leads: number;
  conversions: number;
}

class SalesApiService {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
  private async getAdSpend(accessToken: string, adId: string): Promise<number> {
    try {
      const baseUrl = 'https://graph.facebook.com/v18.0';
      const url = new URL(`${baseUrl}/${adId}/insights`);
      url.searchParams.append('access_token', accessToken);
      url.searchParams.append('date_preset', 'maximum');
      url.searchParams.append('fields', 'spend');

      const response = await fetch(url.toString());
      
      if (!response.ok) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}`);
        return 0;
      }

      const data = await response.json();
      const spend = data.data?.[0]?.spend || 0;
      console.log(`üí∞ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${adId}: –∑–∞—Ç—Ä–∞—Ç—ã $${spend}`);
      return parseFloat(spend);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}:`, error);
      return 0;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  private async getCampaignIdByAdId(accessToken: string, adId: string): Promise<string | null> {
    try {
      const baseUrl = 'https://graph.facebook.com/v18.0';
      const url = new URL(`${baseUrl}/${adId}`);
      url.searchParams.append('access_token', accessToken);
      url.searchParams.append('fields', 'campaign_id');

      const response = await fetch(url.toString());
      
      if (!response.ok) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å campaign_id –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}`);
        return null;
      }

      const data = await response.json();
      console.log(`üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${adId} ‚Üí –ö–∞–º–ø–∞–Ω–∏—è ${data.campaign_id}`);
      return data.campaign_id || null;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è campaign_id –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}:`, error);
      return null;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook API
  private async getFacebookCampaignsData(accessToken: string): Promise<Map<string, { name: string; spend: number }>> {
    const campaignsMap = new Map<string, { name: string; spend: number }>();
    const accountId = 'act_440729139081648';
    const baseUrl = 'https://graph.facebook.com/v18.0';
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook API...');
      
      const url = new URL(`${baseUrl}/${accountId}`);
      url.searchParams.append('access_token', accessToken);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º
      url.searchParams.append('fields', 
        'campaigns{id,name,adsets.limit(1){id,name,ads.limit(1){id,name,insights.date_preset(maximum){spend}}}}'
      );

      const response = await fetch(url.toString());
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Facebook API error:', response.status, errorText);
        return campaignsMap;
      }

      const data = await response.json();
      console.log('üìä Facebook API response:', data);
      
      if (data.campaigns?.data) {
        data.campaigns.data.forEach((campaign: any) => {
          let totalSpend = 0;
          
          // –°–æ–±–∏—Ä–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –≤ –∫–∞–º–ø–∞–Ω–∏–∏
          campaign.adsets?.data?.forEach((adset: any) => {
            adset.ads?.data?.forEach((ad: any) => {
              ad.insights?.data?.forEach((insight: any) => {
                totalSpend += parseFloat(insight.spend) || 0;
              });
            });
          });

          campaignsMap.set(campaign.id, {
            name: campaign.name,
            spend: totalSpend // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
          });
          
          console.log(`üìä –ö–∞–º–ø–∞–Ω–∏—è ${campaign.id}: ${campaign.name}, –∑–∞—Ç—Ä–∞—Ç—ã: $${totalSpend}`);
        });
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${campaignsMap.size} –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook`);
      return campaignsMap;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Facebook:', error);
      return campaignsMap;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
  async getExistingCampaigns(businessId: string): Promise<Array<{id: string, name: string, creative_url?: string}>> {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è business_id:', businessId);

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ source_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã leads
      const { data: campaignsData, error: campaignsError } = await (supabase as any)
        .from('leads')
        .select('source_id, creative_url')
        .eq('business_id', businessId)
        .not('source_id', 'is', null);

      if (campaignsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π:', campaignsError);
        throw campaignsError;
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
      const uniqueCampaigns = new Map<string, {id: string, name: string, creative_url?: string}>();
      
      for (const campaign of campaignsData || []) {
        if (campaign.source_id && !uniqueCampaigns.has(campaign.source_id)) {
          uniqueCampaigns.set(campaign.source_id, {
            id: campaign.source_id,
            name: `–ö–∞–º–ø–∞–Ω–∏—è ${campaign.source_id}`,
            creative_url: campaign.creative_url || undefined
          });
        }
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ Facebook API
      try {
        const { data: userData, error: userError } = await (supabase as any)
          .from('user_accounts')
          .select('access_token')
          .eq('business_id', businessId)
          .single();

        if (!userError && userData?.access_token) {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook API...');
          const facebookCampaigns = await this.getFacebookCampaignsData(userData.access_token);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
          for (const [sourceId, campaignInfo] of uniqueCampaigns) {
            try {
              const campaignId = await this.getCampaignIdByAdId(userData.access_token, sourceId);
              if (campaignId) {
                const fbCampaign = facebookCampaigns.get(campaignId);
                if (fbCampaign) {
                  campaignInfo.name = fbCampaign.name;
                }
              }
            } catch (error) {
              console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${sourceId}:`, error);
            }
          }
        }
      } catch (fbError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook API –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–º–ø–∞–Ω–∏–π:', fbError);
      }

      const result = Array.from(uniqueCampaigns.values());
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π:', result.length);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getExistingCampaigns:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
  async addSale(saleData: SaleData): Promise<any> {
    try {
      console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ purchases:', saleData);
      console.log('üìã Business ID:', saleData.business_id);
      console.log('üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', saleData.client_phone);
      console.log('üí∞ –°—É–º–º–∞:', saleData.amount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const { data: existingLead, error: leadCheckError } = await (supabase as any)
        .from('leads')
        .select('id, chat_id, business_id')
        .eq('chat_id', saleData.client_phone)
        .eq('business_id', saleData.business_id)
        .maybeSingle();

      if (leadCheckError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞:', leadCheckError);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–∞:', existingLead ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω', existingLead);
      
      // –ï—Å–ª–∏ –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
      if (!existingLead) {
        if (saleData.manual_source_id || saleData.manual_campaign_name) {
          console.log('üìù –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–¥ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π...');
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–¥ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π
          const newLeadData = {
            business_id: saleData.business_id,
            chat_id: saleData.client_phone,
            source_id: saleData.manual_source_id || 'manual_created',
            conversion_source: saleData.manual_campaign_name || '–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ',
            creative_url: saleData.manual_creative_url || '',
            sale_amount: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
            created_at: new Date().toISOString()
          };
          
          const { data: newLead, error: newLeadError } = await (supabase as any)
            .from('leads')
            .insert([newLeadData])
            .select()
            .single();
            
          if (newLeadError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞:', newLeadError);
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: ${newLeadError.message}`);
          }
          
          console.log('‚úÖ –ù–æ–≤—ã–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω:', newLead);
        } else {
          throw new Error('–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ª–∏–¥–æ–≤. –£–∫–∞–∂–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞.');
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ purchases (–ø—Ä–∏–≤–æ–¥–∏–º –∫ any –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ç–∏–ø–æ–≤)
      const insertData = {
        business_id: saleData.business_id,
        client_phone: saleData.client_phone,
        amount: saleData.amount
      };
      
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ purchases:', insertData);
      
      const { data: purchase, error: purchaseError } = await (supabase as any)
        .from('purchases')
        .insert([insertData])
        .select()
        .single();

      if (purchaseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ purchases:', purchaseError);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(purchaseError, null, 2));
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (purchaseError.code === '23503') {
          throw new Error('–õ–∏–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        } else if (purchaseError.code === '23505') {
          throw new Error('–ü—Ä–æ–¥–∞–∂–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${purchaseError.message}`);
        }
      }

      console.log('‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ purchases:', purchase);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º leads –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º leads –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
      const { data: existingLeadAfter, error: leadAfterError } = await (supabase as any)
        .from('leads')
        .select('id, sale_amount')
        .eq('chat_id', saleData.client_phone)
        .eq('business_id', saleData.business_id)
        .maybeSingle();

      if (leadAfterError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏:', leadAfterError);
      }

      if (existingLeadAfter) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–¥
        console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–¥, —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞:', existingLeadAfter.sale_amount);
        
        // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const { data: purchasesSum, error: sumError } = await (supabase as any)
          .from('purchases')
          .select('amount')
          .eq('client_phone', saleData.client_phone)
          .eq('business_id', saleData.business_id);

        if (!sumError && purchasesSum) {
          const totalAmount = purchasesSum.reduce((sum: number, p: any) => sum + Number(p.amount), 0);
          console.log('üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', totalAmount);
          
          const { error: updateError } = await (supabase as any)
            .from('leads')
            .update({ sale_amount: totalAmount })
            .eq('id', existingLeadAfter.id);

          if (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sale_amount –≤ leads:', updateError);
          } else {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω sale_amount –≤ leads');
          }
        }
      } else {
        // –õ–∏–¥ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏');
      }
      
      return purchase;
      
    } catch (error) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ addSale:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ROI –¥–∞–Ω–Ω—ã—Ö –ø–æ business_id
  async getROIData(businessId: string): Promise<ROIData> {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ROI –¥–∞–Ω–Ω—ã–µ –¥–ª—è business_id:', businessId);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–æ–≤ —Å source_id (–ø—Ä–∏–≤–æ–¥–∏–º –∫ any –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ç–∏–ø–æ–≤)
      const { data: leadsStats, error: leadsError } = await (supabase as any)
        .from('leads')
        .select('id, chat_id, sale_amount, source_id, creative_url')
        .eq('business_id', businessId);

      if (leadsError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–æ–≤:', leadsError);
        throw leadsError;
      }

      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏–¥–æ–≤:', leadsStats?.length || 0);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π
      const { data: purchasesStats, error: purchasesError } = await (supabase as any)
        .from('purchases')
        .select('id, client_phone, amount, created_at')
        .eq('business_id', businessId);

      if (purchasesError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂:', purchasesError);
        throw purchasesError;
      }

      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥–∞–∂:', purchasesStats?.length || 0);

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook
      let facebookCampaigns: Map<string, any> = new Map();
      const usdToKztRate = 500; // –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ç–µ–Ω–≥–µ
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º access_token –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_accounts
        console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º access_token –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_accounts –¥–ª—è business_id:', businessId);
        
        const { data: userData, error: userError } = await (supabase as any)
          .from('user_accounts')
          .select('access_token, ad_account_id')
          .eq('business_id', businessId)
          .single();

        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ user_accounts:', { userData, userError });

        if (userError || !userData?.access_token) {
          console.log('‚ö†Ô∏è Access token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_accounts:', userError);
          console.log('üìä –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (30% –æ—Ç –≤—ã—Ä—É—á–∫–∏)');
        } else {
          console.log('‚úÖ Access token –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook API...');
          console.log('üìã Facebook config:', { 
            hasToken: !!userData.access_token, 
            tokenLength: userData.access_token?.length,
            adAccountId: userData.ad_account_id 
          });
          
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–π
          facebookCampaigns = await this.getFacebookCampaignsData(userData.access_token);
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${facebookCampaigns.size} –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ Facebook API`);
          
          // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
          facebookCampaigns.forEach((campaign, id) => {
            console.log(`üìä FB –ö–∞–º–ø–∞–Ω–∏—è ${id}: ${campaign.name}, –∑–∞—Ç—Ä–∞—Ç—ã: $${campaign.spend}`);
          });
        }
      } catch (fbError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Facebook API:', fbError);
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ source_id (ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
      const campaignMap = new Map<string, CampaignROI>();
      let totalRevenue = 0;
      let totalLeads = leadsStats?.length || 0;
      let totalConversions = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      for (const lead of leadsStats || []) {
        const sourceId = lead.source_id || 'manual_sale';
        const revenue = Number(lead.sale_amount) || 0;
        const hasConversion = revenue > 0;
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏–¥–∞
        const leadPurchases = purchasesStats?.filter(p => p.client_phone === lead.chat_id) || [];
        const purchaseCount = leadPurchases.length;
        
        console.log(`üìä –õ–∏–¥ ${lead.id}: source_id=${sourceId}, revenue=${revenue}, hasConversion=${hasConversion}, purchases=${purchaseCount}`);
        
        if (hasConversion) {
          totalConversions += purchaseCount; // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂, –∞ –Ω–µ –ª–∏–¥–æ–≤
        }
        totalRevenue += revenue;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ source_id (ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        if (!campaignMap.has(sourceId)) {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Facebook API
          console.log(`üîç –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è source_id: ${sourceId}`);
          
          let campaignName = sourceId === 'manual_sale' ? '–†—É—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏' : `–ö–∞–º–ø–∞–Ω–∏—è ${sourceId}`;
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å Facebook —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          if (facebookCampaigns.size > 0 && sourceId !== 'manual_sale') {
            // source_id —ç—Ç–æ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–º–ø–∞–Ω–∏–∏
            try {
              const { data: userData, error: userError } = await (supabase as any)
                .from('user_accounts')
                .select('access_token')
                .eq('business_id', businessId)
                .single();

              if (!userError && userData?.access_token) {
                const campaignId = await this.getCampaignIdByAdId(userData.access_token, sourceId);
                if (campaignId) {
                  const fbCampaign = facebookCampaigns.get(campaignId);
                  if (fbCampaign) {
                    campaignName = fbCampaign.name;
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignName} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${sourceId}`);
                  } else {
                    console.log(`‚ö†Ô∏è –ö–∞–º–ø–∞–Ω–∏—è ${campaignId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Facebook`);
                  }
                }
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${sourceId}:`, error);
            }
          }
          
          console.log(`üìã –ò—Ç–æ–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignName}`);
          
          campaignMap.set(sourceId, {
            id: sourceId,
            name: campaignName,
            creative_url: lead.creative_url || '',
            spend: 0, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∏–∂–µ
            revenue: 0,
            roi: 0,
            leads: 0,
            conversions: 0
          });
        }

        const campaign = campaignMap.get(sourceId)!;
        campaign.leads++;
        campaign.revenue += revenue;
        if (hasConversion) campaign.conversions += purchaseCount;
        
        // –ë–µ—Ä–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ source_id (–∫–∞–∫ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        if (!campaign.creative_url && lead.creative_url) {
          campaign.creative_url = lead.creative_url;
        }
      }

      // –í—ã—á–∏—Å–ª—è–µ–º ROI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
      const campaigns = Array.from(campaignMap.values());
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
      for (const campaign of campaigns) {
        const sourceId = campaign.id;
        let spendInKzt: number;
        
        console.log(`üí∞ –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –¥–ª—è source_id ${sourceId} (${campaign.name})`);
        
        if (sourceId !== 'manual_sale' && facebookCampaigns.size > 0) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º access_token
            const { data: userData, error: userError } = await (supabase as any)
              .from('user_accounts')
              .select('access_token')
              .eq('business_id', businessId)
              .single();

            if (!userError && userData?.access_token) {
              // –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
              const spendInUsd = await this.getAdSpend(userData.access_token, sourceId);
              spendInKzt = Math.round(spendInUsd * usdToKztRate);
              console.log(`‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${sourceId}: $${spendInUsd} = ${spendInKzt}‚Ç∏`);
            } else {
              // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
              spendInKzt = Math.round(campaign.revenue * 0.3);
              console.log(`‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è ${sourceId}: ${spendInKzt}‚Ç∏`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –¥–ª—è ${sourceId}:`, error);
            spendInKzt = Math.round(campaign.revenue * 0.3);
            console.log(`‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ (–æ—à–∏–±–∫–∞) –¥–ª—è ${sourceId}: ${spendInKzt}‚Ç∏`);
          }
        } else {
          // –î–ª—è —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç Facebook –¥–∞–Ω–Ω—ã—Ö
          spendInKzt = Math.round(campaign.revenue * 0.3);
          console.log(`‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è ${sourceId}: ${spendInKzt}‚Ç∏`);
        }
        
        const roi = spendInKzt > 0 ? Math.round(((campaign.revenue - spendInKzt) / spendInKzt) * 100) : 0;
        
        campaign.spend = spendInKzt;
        campaign.roi = roi;
      }

      const totalSpend = campaigns.reduce((sum, c) => sum + c.spend, 0);
      const totalROI = totalSpend > 0 ? Math.round(((totalRevenue - totalSpend) / totalSpend) * 100) : 0;

      const result: ROIData = {
        totalRevenue,
        totalSpend,
        totalROI,
        totalLeads,
        totalConversions,
        campaigns
      };

      console.log('‚úÖ ROI –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result);
      return result;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getROIData:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ business_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUserBusinessId(): Promise<string | null> {
    try {
      const storedUser = localStorage.getItem('user');
      if (!storedUser) return null;

      const userData = JSON.parse(storedUser);
      if (!userData.id) return null;

      // –ü–æ–ª—É—á–∞–µ–º business_id –∏–∑ user_accounts
      const { data: user, error } = await supabase
        .from('user_accounts')
        .select('business_id')
        .eq('id', userData.id)
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è business_id:', error);
        return null;
      }

      return (user as any)?.business_id || null;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getCurrentUserBusinessId:', error);
      return null;
    }
  }
}

export const salesApi = new SalesApiService(); 